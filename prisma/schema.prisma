generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  MANAGER
}

enum LeaveStatus {
  Pending
  Approved
  Rejected
}

enum ProjectStatus {
  ACTIVE
  INACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskStatus {
  Backlog
  Todo
  In_Progress
  Done
  Canceled
}

enum TaskPriority {
  Low
  Medium
  High
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  email          String     @unique
  hashedPassword String?
  role           UserRole   @default(USER)
  username       String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  employees      Employee[]
}

model Department {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  managerId   String?    @db.ObjectId
  description String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  employees   Employee[] @relation("DepartmentEmployees")
  manager     Employee?  @relation(fields: [managerId], references: [id])
}

model Employee {
  id                    String    @id @default(auto()) @map("_id") @db.ObjectId
  name                  String
  workEmail             String    @unique
  position              String
  workMobile            String
  personalMobile        String
  profile_photo         String
  workAddress           String?
  workLocation          String?
  workingHours          String?
  startDate             DateTime?
  timeZone              String?
  privateAddress        String?
  personalEmail         String?
  phone                 String?
  bankAccountNumber     String?
  bankName              String?
  maritalStatus         String?
  numberOfDependents    Int?      @default(0)
  emergencyContactName  String?
  emergencyContactPhone String?
  nationality           String?
  idNumber              String?
  gender                String?
  dateOfBirth           DateTime?
  employeeType          String?
  idCopy                String?
  resumeCopy            String?
  passbookCopy          String?
  employeeNumber        String?
  basicSalary           Float?
  dataAllowance         Float?
  mobileAllowance       Float?
  performanceAllowance  Float?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId

  departmentId       String?           @db.ObjectId
  employeeDepartment Department?       @relation("DepartmentEmployees", fields: [departmentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  Attendance         Attendance[]
  Department         Department[]
  Leave              Leave[]
  leaveBalance       LeaveBalance?     @relation(fields: [leaveBalanceId], references: [id])
  leaveBalanceId     String?           @db.ObjectId
  Payroll            Payroll[]
  notifications      Notification[]
  deductions         Deduction[]
  loans              Loan[]
  salaryAdvances     SalaryAdvance[]
  employeeProjects   EmployeeProject[]
  taskWorks          TaskWork[]
  tasks              Task[]
}

model Attendance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  date       DateTime?
  timeIn     DateTime?
  timeOut    DateTime?
  totalHours String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @db.ObjectId
}

model LeaveBalance {
  id                        String   @id @default(auto()) @map("_id") @db.ObjectId
  annual                    Int      @default(0)
  casual                    Int      @default(0)
  medical                   Int      @default(0)
  unpaid                    Int      @default(0)
  broughtForward            Int      @default(0)
  duty                      Int      @default(0)
  annualEntitlement         Int      @default(0)
  casualEntitlement         Int      @default(0)
  medicalEntitlement        Int      @default(0)
  unpaidEntitlement         Int      @default(0)
  broughtForwardEntitlement Int      @default(0)
  dutyEntitlement           Int      @default(0)
  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt

  employeeId String     @db.ObjectId
  Employee   Employee[]
}

model Leave {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  type       String
  startDate  DateTime?
  endDate    DateTime?
  reason     String?
  status     LeaveStatus? @default(Pending)
  medical    String?
  otherProof String?
  approvedBy String?
  approvedAt DateTime?
  rejectedBy String?
  rejectedAt DateTime?
  remarks    String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @db.ObjectId
}

model Payroll {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  monthYear              String
  basicSalary            Float
  dataAllowance          Float
  mobileAllowance        Float?
  projectAllowance       Float?
  performanceAllowance   Float?
  holidayAllowance       Float?
  otherAllowances        Float?
  epfDeduction           Float
  companyEpfContribution Float
  companyEtfContribution Float
  salaryAdvance          Float?
  loanDeduction          Float?
  otherDeductions        Float?
  totalDeductions        Float
  totalEarnings          Float
  workingDays            Int?
  paidDays               Int?
  netSalary              Float
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  employee       Employee        @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId     String          @db.ObjectId
  salaryAdvances SalaryAdvance[]
  loans          Loan[]
  otherDeduction Deduction[]
}

model Deduction {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  description  String? // Add a description field to track the type of deduction
  amount       Float
  startDate    DateTime?
  endDate      DateTime?
  isInstalment Boolean   @default(false)
  instalments  Int?      @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @db.ObjectId
  payroll    Payroll? @relation(fields: [payrollId], references: [id])
  payrollId  String?  @db.ObjectId
}

model Loan {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  amount           Float
  date             DateTime
  installments     Int?     @default(0)
  isSettled        Boolean? @default(false)
  paidInstallments Int?
  settledAmount    Float?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @db.ObjectId
  payroll    Payroll? @relation(fields: [payrollId], references: [id])
  payrollId  String?  @db.ObjectId
}

model SalaryAdvance {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  amount    Float
  date      DateTime
  isSettled Boolean? @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @db.ObjectId

  payroll   Payroll? @relation(fields: [payrollId], references: [id])
  payrollId String?  @db.ObjectId
}

model Notification {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  message String
  type    String
  isRead  Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  employeeId String   @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
}

model Token {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  email   String
  address String?
  phone   String?

  projects Project[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  startDate        DateTime?
  endDate          DateTime?
  category         String?
  status           ProjectStatus?
  clientId         String            @db.ObjectId
  client           Client            @relation(fields: [clientId], references: [id])
  projectAssignees EmployeeProject[]
  projectScope     String?
  designLink       String?
  specialNotes     String?

  nftBaseDesignCount Int? @default(0)
  nftTraitCount      Int? @default(0)
  nftCollectionSize  Int? @default(0)

  tasks    Task[]
  progress Int?   @default(0)

  board Board[]
  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmployeeProject {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  employeeId String   @db.ObjectId
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId  String   @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String        @id @default(auto()) @map("_id") @db.ObjectId
  taskId      String
  title       String
  description String?
  label       String?
  status      TaskStatus?   @default(Todo)
  priority    TaskPriority? @default(Low)

  assignee String   @db.ObjectId
  employee Employee @relation(fields: [assignee], references: [id], onDelete: Cascade)

  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  cards         Card[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  workPerformed TaskWork[]
}

model TaskWork {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  startTime   DateTime
  endTime     DateTime
  hoursWorked Float
  date        DateTime
  description String?

  taskId String @db.ObjectId
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)

  employeeId String   @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)

  projectId String? @db.ObjectId

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Otp {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  email          String   @unique
  otp            String
  expirationTime DateTime
}

model Board {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  imageId       String?
  imageThumbUrl String
  imageFullUrl  String
  imageUserName String
  imageLinkHTML String

  lists     List[]
  projectId String  @db.ObjectId
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model List {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  title   String
  order   Int
  boardId String @db.ObjectId
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)

  cards Card[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([boardId])
}

model Card {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  order       Int
  description String?

  listId String @db.ObjectId
  list   List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  taskId    String?  @db.ObjectId
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: Cascade)
  projectId String?  @db.ObjectId
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([listId])
}

enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  CARD
  LIST
}

model AuditLog {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String      @db.ObjectId
  action      ACTION
  entityId    String
  entityType  ENTITY_TYPE
  entityTitle String
  userId      String
  userImage   String
  userName    String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
